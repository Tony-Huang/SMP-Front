-- ***************************************************************************
-- IBM Confidential
-- 
-- OCO Source Materials
-- 
-- IBM SPSS Products: Analytic Server 
--
-- (C) Copyright IBM Corp. 2012
-- 
-- The source code for this program is not published or otherwise divested of
-- its trade secrets, irrespective of what has been deposited with the U.S.
-- Copyright Office.
-- ***************************************************************************

CREATE TABLE CONSUMERS
    (id BIGINT GENERATED BY DEFAULT AS IDENTITY, name VARCHAR(128) NOT NULL, description VARCHAR(256), status VARCHAR(10) NOT NULL DEFAULT 'ACTIVE',
    UNIQUE (name),
    PRIMARY KEY (id));
    
CREATE TABLE QUOTAS
    (id BIGINT GENERATED BY DEFAULT AS IDENTITY, name VARCHAR(128) NOT NULL, value BIGINT NOT NULL DEFAULT 0, consumerId BIGINT,
    FOREIGN KEY(consumerId) REFERENCES CONSUMERS(id) ON DELETE CASCADE,
    UNIQUE (name, consumerId),
    PRIMARY KEY (id));

CREATE TABLE PROJECTS
    (id BIGINT GENERATED BY DEFAULT AS IDENTITY, name VARCHAR(128) NOT NULL, description VARCHAR(1024), timestamp BIGINT, isPublic SMALLINT, consumerId BIGINT NOT NULL, creationDate BIGINT NOT NULL DEFAULT 0 , createdBy VARCHAR(128) NOT NULL DEFAULT '', modifiedDate BIGINT NOT NULL DEFAULT 0, modifiedBy VARCHAR(128) NOT NULL DEFAULT '',
    FOREIGN KEY(consumerId) REFERENCES CONSUMERS(id) ON DELETE CASCADE,
    UNIQUE (name, consumerId),
    PRIMARY KEY (id));
    
CREATE TABLE PROJECT_ATTRIBUTES
	(id BIGINT GENERATED BY DEFAULT AS IDENTITY, projectId BIGINT, type VARCHAR(10) NOT NULL, name VARCHAR(128) not null, value VARCHAR(1024),
	FOREIGN KEY(projectId) references PROJECTS(id) ON DELETE CASCADE,
	UNIQUE (projectId, type, name),
	PRIMARY KEY (id));
	
CREATE TABLE PRINCIPALS
    (id BIGINT GENERATED BY DEFAULT AS IDENTITY, external_id VARCHAR(128) NOT NULL, type INT, consumerId BIGINT NOT NULL,
    FOREIGN KEY(consumerId) REFERENCES CONSUMERS(id) ON DELETE CASCADE,
    UNIQUE (external_id, consumerId),
    PRIMARY KEY (id));

CREATE TABLE PRINCIPAL_ATTRIBUTES
	(id BIGINT GENERATED BY DEFAULT AS IDENTITY, principalId BIGINT, type VARCHAR(10), name VARCHAR(128), value VARCHAR(1024), 
	FOREIGN KEY(principalId) references PRINCIPALS(id) ON DELETE CASCADE,
	UNIQUE (principalId, type, name),
	PRIMARY KEY (id));

CREATE TABLE DATASOURCES
    (id BIGINT GENERATED BY DEFAULT AS IDENTITY, name VARCHAR(128) NOT NULL, type VARCHAR(128), dataModelPath VARCHAR(512), consumerId BIGINT NOT NULL, description VARCHAR(1024), isPublic SMALLINT, creationDate BIGINT NOT NULL DEFAULT 0, createdBy VARCHAR(128) NOT NULL DEFAULT '', modifiedDate BIGINT NOT NULL DEFAULT 0, modifiedBy VARCHAR(128) NOT NULL DEFAULT '',
    FOREIGN KEY(consumerId) REFERENCES CONSUMERS(id) ON DELETE CASCADE,
    UNIQUE (name, consumerId),
    PRIMARY KEY (id));
    
CREATE TABLE DATASOURCE_ATTRIBUTES
	(id BIGINT GENERATED BY DEFAULT AS IDENTITY, datasourceId BIGINT, type VARCHAR(10) NOT NULL, name VARCHAR(128) not null, value VARCHAR(1024),
	FOREIGN KEY(datasourceId) references DATASOURCES(id) ON DELETE CASCADE,
	UNIQUE (datasourceId, type, name),
	PRIMARY KEY (id)); 
        
CREATE TABLE SECURITYPROVIDERCONFIGURATION
	(id BIGINT GENERATED BY DEFAULT AS IDENTITY, configuration VARCHAR(4096) not null, consumerId BIGINT,
	FOREIGN KEY(consumerId) REFERENCES CONSUMERS(id) ON DELETE CASCADE,
	UNIQUE (consumerId),
	PRIMARY KEY (id));

CREATE TABLE PATHS
    (id BIGINT GENERATED BY DEFAULT AS IDENTITY, path VARCHAR(512), consumerId BIGINT,
    FOREIGN KEY(consumerId) REFERENCES CONSUMERS(id) ON DELETE CASCADE,
    PRIMARY KEY (id));
    
CREATE TABLE PERMISSIONS
    (id BIGINT GENERATED BY DEFAULT AS IDENTITY, name VARCHAR(128) NOT NULL,
    UNIQUE (name),
    PRIMARY KEY (id));

CREATE TABLE ROLES
    (id BIGINT GENERATED BY DEFAULT AS IDENTITY, name VARCHAR(128) NOT NULL, description VARCHAR(1024), consumerId BIGINT,
    FOREIGN KEY(consumerId) REFERENCES CONSUMERS(id) ON DELETE CASCADE,
    UNIQUE (name,consumerId),
    PRIMARY KEY (id));
    
-- Table VERSION - holds the AE db schema version
-- number: db schema version number. This is corelated with the AE version at the build time
CREATE TABLE VERSION
    (number VARCHAR(64), created timestamp);
INSERT into VERSION values('{current.version}', current_timestamp);

-- Association tables
CREATE TABLE MAPPRINCIPALSANDROLES
    (principalId BIGINT NOT NULL, roleId BIGINT NOT NULL, 
    FOREIGN KEY (principalId) references PRINCIPALS(id) ON DELETE CASCADE,
    FOREIGN KEY (roleId) references ROLES(id) ON DELETE CASCADE,
    UNIQUE (principalId, roleId));

CREATE TABLE MAPPRINCIPALSANDPERMISSIONS
    (principalId BIGINT NOT NULL, permissionId BIGINT NOT NULL, 
    FOREIGN KEY (principalId) references PRINCIPALS(id) ON DELETE CASCADE,
    FOREIGN KEY (permissionId) references PERMISSIONS(id) ON DELETE CASCADE,
    UNIQUE (principalId, permissionId));

CREATE TABLE MAPPROJECTSANDDATA
    (projectId BIGINT NOT NULL, datasourceId BIGINT NOT NULL, filerefId BIGINT,
    FOREIGN KEY (projectId) references PROJECTS(id) ON DELETE CASCADE,
    FOREIGN KEY (datasourceId) references DATASOURCES(id) ON DELETE CASCADE,
    UNIQUE (projectId, datasourceId, filerefId));

CREATE TABLE MAPDATASOURCESANDPATHS
    (datasourceId BIGINT NOT NULL, pathId BIGINT NOT NULL,
    FOREIGN KEY (datasourceId) references DATASOURCES(id) ON DELETE CASCADE,
    FOREIGN KEY (pathId) references PATHS(id) ON DELETE CASCADE,
    UNIQUE (datasourceId, pathId));

CREATE TABLE MAPPROJECTSANDVIEWERS
    (projectId BIGINT NOT NULL, principalId BIGINT NOT NULL,
    FOREIGN KEY (projectId) references PROJECTS(id) ON DELETE CASCADE,
    FOREIGN KEY (principalId) references PRINCIPALS(id) ON DELETE CASCADE,
    UNIQUE (projectId, principalId));
    
CREATE TABLE MAPPROJECTSANDPARTICIPANTS
    (projectId BIGINT NOT NULL, principalId BIGINT NOT NULL,
    FOREIGN KEY (projectId) references PROJECTS(id) ON DELETE CASCADE,
    FOREIGN KEY (principalId) references PRINCIPALS(id) ON DELETE CASCADE,
    UNIQUE (projectId, principalId));

CREATE TABLE MAPROLESANDPERMISSIONS
	(roleId BIGINT NOT NULL, permissionId BIGINT NOT NULL, 
	FOREIGN KEY(roleId) references ROLES(id) ON DELETE CASCADE, 
	FOREIGN KEY(permissionId) references PERMISSIONS(id) ON DELETE CASCADE,
	UNIQUE (roleId, permissionId));

CREATE TABLE MAPPRINCIPALSANDDATASOURCES
    (principalId BIGINT NOT NULL, datasourceId BIGINT NOT NULL, 
    FOREIGN KEY (principalId) references PRINCIPALS(id) ON DELETE CASCADE,
    FOREIGN KEY (datasourceId) references DATASOURCES(id) ON DELETE CASCADE,
    UNIQUE (principalId, datasourceId));

CREATE TABLE PATHSATTRIBUTES
	(pathId BIGINT NOT NULL, attributeName VARCHAR(128) NOT NULL, attributeValue VARCHAR(1024),
    FOREIGN KEY (pathId) references PATHS(id) ON DELETE CASCADE,
    UNIQUE (pathId, attributeName));

-- Indexes
CREATE INDEX Principals_types on PRINCIPALS (type);
CREATE INDEX Projects_name on PROJECTS (name);
CREATE INDEX Roles_name on ROLES (name);
CREATE INDEX Roles_consumer_name on ROLES (consumerId, name);
CREATE INDEX Datasources_consumer_name on DATASOURCES (consumerId, name);
CREATE INDEX Datasources_name on DATASOURCES (name);
CREATE INDEX Datasource_attributes_type on DATASOURCE_ATTRIBUTES (datasourceId, type);
CREATE INDEX Project_attributes_type on PROJECT_ATTRIBUTES (projectId, type);
CREATE INDEX Quotas_consumer_name on QUOTAS (consumerId, name);

-- Indexes on foreign keys
CREATE INDEX quota_cons_id on QUOTAS (consumerId);
CREATE INDEX projects_cons_id on PROJECTS (consumerId);
CREATE INDEX projects_attrs_project_id on PROJECT_ATTRIBUTES (projectId);
CREATE INDEX principals_cons_id on PRINCIPALS (consumerId);
CREATE INDEX principals_attrs_principal_id on PRINCIPAL_ATTRIBUTES (principalId);
CREATE INDEX ds_cons_id on DATASOURCES (consumerId);
CREATE INDEX ds_attrs_ds_id on DATASOURCE_ATTRIBUTES (datasourceId);
CREATE INDEX security_cons_id on SECURITYPROVIDERCONFIGURATION (consumerId);
CREATE INDEX paths_cons_id on PATHS (consumerId);
CREATE INDEX roles_cons_id on ROLES (consumerId);
CREATE INDEX path_attrs_path_id on PATHSATTRIBUTES (pathId);

CREATE INDEX mpr_p_id on MAPPRINCIPALSANDROLES (principalId);
CREATE INDEX mpr_r_id on MAPPRINCIPALSANDROLES (roleId);

CREATE INDEX mpp_p1_id on MAPPRINCIPALSANDPERMISSIONS (principalId);
CREATE INDEX mpp_p2_id on MAPPRINCIPALSANDPERMISSIONS (permissionId);

CREATE INDEX mpp_p3_id on MAPPROJECTSANDPARTICIPANTS (principalId);
CREATE INDEX mpp_p4_id on MAPPROJECTSANDPARTICIPANTS (projectId);

CREATE INDEX mpd_p_id on MAPPROJECTSANDDATA (projectId);
CREATE INDEX mpd_d_id on MAPPROJECTSANDDATA (datasourceId);

CREATE INDEX mdp_d_id on MAPDATASOURCESANDPATHS (datasourceId);
CREATE INDEX mdp_p_id on MAPDATASOURCESANDPATHS (pathId);

CREATE INDEX mpv_p_id on MAPPROJECTSANDVIEWERS (projectId);
CREATE INDEX mpv_v_id on MAPPROJECTSANDVIEWERS (principalId);

CREATE INDEX mrp_r_id on MAPROLESANDPERMISSIONS (roleId);
CREATE INDEX mrp_p_id on MAPROLESANDPERMISSIONS (permissionId);

CREATE INDEX mpd_p1_id on MAPPRINCIPALSANDDATASOURCES (principalId);
CREATE INDEX mpd_d2_id on MAPPRINCIPALSANDDATASOURCES (datasourceId);

-- Views
 CREATE VIEW datasource_view (id, consumerId, name, type, datamodelpath, description, isPublic, attributeType, attributeName, attributeValue, creationDate, createdBy, modifiedDate, modifiedBy) AS
    SELECT d.id, d.consumerId, d.name, d.type, d.datamodelpath, d.description, d.isPublic, da.type, da.name, da.value, d.creationDate, d.createdBy, d.modifiedDate, d.modifiedBy FROM 
	datasources d LEFT OUTER JOIN datasource_attributes da ON  d.id=da.datasourceId;
	
 CREATE VIEW project_view (id, consumerId, name, description, timestamp, isPublic, attributeType, attributeName, attributeValue, creationDate, createdBy, modifiedDate, modifiedBy) AS
	select p.id, p.consumerId, p.name, p.description, p.timestamp, p.isPublic, pa.type, pa.name, pa.value, p.creationDate, p.createdBy, p.modifiedDate, p.modifiedBy FROM 
	projects p LEFT OUTER JOIN project_attributes pa ON  p.id=pa.projectId;

 CREATE VIEW principal_view (id, external_id, type, consumerId, attributeType, attributeName, attributeValue) AS
	SELECT p.id, p.external_id, p.type, p.consumerId, pa.type, pa.name, pa.value  FROM
	principals p LEFT OUTER JOIN principal_attributes pa ON p.id=pa.principalId;

-- Create default consumer (ibm)
INSERT into CONSUMERS values(default,'ibm','','ACTIVE');

-- Create some default permissions
INSERT into PERMISSIONS values(default,'MANAGE.PROJECT');
INSERT into PERMISSIONS values(default,'MANAGE.DATASOURCE');
INSERT into PERMISSIONS values(default,'MANAGE.ANY.PROJECT');
INSERT into PERMISSIONS values(default,'MANAGE.ANY.DATASOURCE');
INSERT into PERMISSIONS values(default,'MANAGE.ROLE');
INSERT into PERMISSIONS values(default,'EXECUTE');
INSERT into PERMISSIONS values(default,'MANAGE.PERMISSION');
INSERT into PERMISSIONS values(default,'MANAGE.CONSUMER');
INSERT into PERMISSIONS values(default,'MANAGE.ANY.CONSUMER');
INSERT into PERMISSIONS values(default,'MANAGE.EXTERNAL.FILESYSTEM');

-- Create the default role
INSERT into ROLES values(default,'ADMIN',default,(SELECT CONSUMERS.id from CONSUMERS where name='ibm'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='ADMIN'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.ANY.PROJECT'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='ADMIN'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.ANY.DATASOURCE'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='ADMIN'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.ROLE'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='ADMIN'),(SELECT PERMISSIONS.id from PERMISSIONS where name='EXECUTE'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='ADMIN'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.PERMISSION'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='ADMIN'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.CONSUMER'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='ADMIN'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.ANY.CONSUMER'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='ADMIN'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.EXTERNAL.FILESYSTEM'));

-- Create the default Tenant Administrator role
INSERT into ROLES values(default,'Administrator',default,(SELECT CONSUMERS.id from CONSUMERS where name='ibm'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='Administrator'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.ANY.PROJECT'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='Administrator'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.ANY.DATASOURCE'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='Administrator'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.ROLE'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='Administrator'),(SELECT PERMISSIONS.id from PERMISSIONS where name='EXECUTE'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='Administrator'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.PERMISSION'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='Administrator'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.CONSUMER'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='Administrator'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.EXTERNAL.FILESYSTEM'));

-- Create the default User role
INSERT into ROLES values(default,'User',default,(SELECT CONSUMERS.id from CONSUMERS where name='ibm'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='User'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.PROJECT'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='User'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.DATASOURCE'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='User'),(SELECT PERMISSIONS.id from PERMISSIONS where name='EXECUTE'));
INSERT into MAPROLESANDPERMISSIONS values((SELECT ROLES.id from ROLES where name='User'),(SELECT PERMISSIONS.id from PERMISSIONS where name='MANAGE.EXTERNAL.FILESYSTEM'));

-- Create public project
INSERT into PROJECTS (id, name, description, timestamp, isPublic, consumerId, creationDate, createdBy, modifiedDate, modifiedBy) values(default,'public','public',0,1,(SELECT CONSUMERS.id from CONSUMERS where name='ibm'), 1357020000000, 'admin', 1357020000000, 'admin');
